************************** Анонимные (безымянные) классы **************************

Анонимным классом называется класс, в котором программист не задает явно имя экземпляру.
Простой пример: 'new MyClass();' т.е. нет классического 'MyClass my_class ='

В анонимном классе явно не задается конструктор класса, а используется конструктор базового класса.
Мы можем создать анонимный класс, передав некоторое значение в конструктор базового класса.
new MyClass(80);

!!! Случаи применения !!!
Анонимные классы применяются там, где вам необходим функционал анонимного класса без повторного
использования (КЛАСС НА РАЗ). При повторном использовании функционала анонимного класса есть смысл
создать отдельный класс.

Добавить новый функционал анонимному классу можно так:
new MyClass(){ * Тело нового анонимного класса. Новый функционал нашего класса };

Точка с запятой, означает не только окончание класса, а окончание блока кода.

Пример (работает некорректно, см. ниже):

public class MyFutureAnonymousClass {

    public static void main(String[] args) {
        new MyFutureAnonymousClass(){
            // добавили новый метод нашему анонимному классу
            void my_new_method(){
                System.out.println("Привет от анонима (или ананима?)");
            }
        };
    }
}

Но в таком виде наш пример не будет работать. Ведь у анонимного класса нет конструктора (т.к. нет имени),
кроме как конструктора базового класса. Как же нам быть? Как запустить наш метод, если у нас нет имени
класса, нет конструктора класса, а есть только метод?

У нас есть возможность выполнить наш метод из блока инициализации.
Дописываем блок инициализации и выполняем наш метод:

public class MyFutureAnonymousClass {

    public static void main(String[] args) {
        new MyFutureAnonymousClass(){
            {
                        this.my_new_method();
            }
            // добавили новый метод нашему анонимному классу
            void my_new_method(){
                System.out.println("Привет от анонима (или ананима?)");
            }
        };
    }
}

Анонимными классами не следует злоупотреблять, иначе у вас получится код, в котором будет
сложно разобраться и поддерживать. Анонимные (внутренние, вложенные, локальные) применяются
для сокрытия реализации.

Анонимный вложенный класс не является членом содержащего его класса. Анонимный класс определяется
и порождает экземпляр в момент использования. Он не определяется вместе с остальными членами
включающего его класса. Анонимный класс можно поместить в любом месте программы, где разрешается
применять локальные переменные.

В зависимости от контекста анонимный класс, член другого класса, ведет себя по-разному.
В нестатическом контексте появляется окружающий его экземпляр, в статическом контексте ведет себя
как статический.

Цитата из книги 'Effective Java TM. Programming Language Guide.' - Joshua Bloch. :
"Существуют четыре категории вложенных классов, каждая из которых занимает свое место. Если
вложенный класс должен быть виден за пределами одного метода или он слишком длинный для того,
чтобы его можно было удобно разместить в границах метода, используйте класс-член. Если каждому
экземпляру класса-члена необходима ссылка на включающий его экземпляр, делайте его нестатическим,
в остальных случаях он должен быть статическим. Предположим, что класс находится внутри метода.
Если вам нужно создавать экземпляры этого класса только в одном месте программы и уже есть тип,
который характеризует это класс, сделайте его анонимным классом.
В противном случае, это должен быть локальный класс."

Анонимный класс может быть не только наследуемым от другого класса (как правило, абстрактного), но
и имплементировать интерфейс. Широкое применение анонимные классы находят в создании многопоточности на java,
а также для создания «слушателей» события и «адаптеров».