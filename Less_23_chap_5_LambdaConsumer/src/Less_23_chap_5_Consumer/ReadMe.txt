В JDK 8 вместе с самой функциональностью лямбда-выражений также было добавлено некоторое количество
встроенных функциональных интерфейсов, которые мы можем использовать в различных ситуациях и в
различные API в рамках JDK 8. В частности, ряд далее рассматриваемых интерфейсов широко применяется
в Stream API - новом прикладном интерфейсе для работы с данными.
Основные из этих интерфейсов:
- Predicate<T>
- Consumer<T>
- Function<T,R>
- Supplier<T>
- UnaryOperator<T>
- BinaryOperator<T>

*** Consumer<T> ***
Consumer<T> выполняет некоторое действие над объектом типа T, при этом ничего не возвращая:

public interface Consumer<T> {
    void accept(T t);
}

Например:
--------------------------------------------------------------------------------------------------
import java.util.function.Consumer;

public class ConsumerLambdaApp {
     public static void main(String[] args) {
        Consumer<Integer> printer = x-> System.out.printf("%d долларов \n", x);
        printer.accept(600); // 600 долларов
    }
}
--------------------------------------------------------------------------------------------------