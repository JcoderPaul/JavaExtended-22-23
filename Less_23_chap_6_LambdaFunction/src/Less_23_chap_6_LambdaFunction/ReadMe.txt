В JDK 8 вместе с самой функциональностью лямбда-выражений также было добавлено некоторое количество
встроенных функциональных интерфейсов, которые мы можем использовать в различных ситуациях и в
различные API в рамках JDK 8. В частности, ряд далее рассматриваемых интерфейсов широко применяется
в Stream API - новом прикладном интерфейсе для работы с данными.
Основные из этих интерфейсов:
- Predicate<T>
- Consumer<T>
- Function<T,R>
- Supplier<T>
- UnaryOperator<T>
- BinaryOperator<T>

*** Function<T,R> ***
Функциональный интерфейс Function<T,R> представляет функцию перехода от объекта типа <T> к объекту типа <R>:
<T> - входной параметр TYPE
<R> - возвращаемый объект RETURN

public interface Function<T, R> {
    R apply(T t);
}

Например:
-------------------------------------------------------------------------------------------------------------
import java.util.function.Function;

public class FunctionLambdaApp {

    public static void main(String[] args) {

        Function<Integer, String> convert = x-> String.valueOf(x) + " долларов";
        System.out.println(convert.apply(5)); // 5 долларов
    }
}
-------------------------------------------------------------------------------------------------------------